/*
 * Sketch of Assertion Generation endpoint
 *
 */

package us.freeandfair.corla.endpoint;


import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

import spark.Request;
import spark.Response;

import us.freeandfair.corla.asm.ASMEvent;

import static us.freeandfair.corla.asm.ASMState.DoSDashboardState.COMPLETE_AUDIT_INFO_SET;


/**
 * Generates assertions by: collecting the set of contests (by ID) for which assertions should ;
 * be generated; calling the RAIRE service to form assertions for those contests; storing the
 * generated assertions (returned from the RAIRE service in JSON) into the database.
 */
public class GenerateAssertions extends AbstractDoSDashboardEndpoint {
  /**
   * Class-wide logger
   */
  public static final Logger LOGGER = LogManager.getLogger(GenerateAssertions.class);

  /**
   * The event to return for this endpoint.
   */
  private final ThreadLocal<ASMEvent> my_event = new ThreadLocal<ASMEvent>();

  /**
   * {@inheritDoc}
   */
  @Override
  public EndpointType endpointType() {
    return EndpointType.POST;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public String endpointName() {
    return "/generate-assertions";
  }

  /**
   * @return STATE authorization is necessary for this endpoint.
   */
  public AuthorizationType requiredAuthorization() {
    return AuthorizationType.STATE;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  protected ASMEvent endpointEvent() {
    return my_event.get();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  protected void reset() {
    my_event.set(null);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public String endpointBody(final Request the_request, final Response the_response) {
    if (my_asm.get().currentState() != COMPLETE_AUDIT_INFO_SET) {
      // We can only generate assertions when CVRs have been provided for all the contests
      // that we want to generate assertions for.

      // For now, require the ASM to be in the COMPLETE_AUDIT_INFO_SET state.

      // Assertions can not yet be generated when the system is in this state.
    }

    // Note that assertions may already exist in the database for various contests. In this case,
    // if we are generating a new set of assertions for a contests, the old ones should be replaced.

    // For a specified set of contest IDs, call the RAIRE service to generate assertions.
    // Assume we extract ArrayList<Long> contestIds = .... from request.

    // Task #48: Add example call to raire connector service here with contestsIds as input.

    // Create NEBAssertion and NENAssertion objects for the set of assertions identified by RAIRE.

    // Persist these assertion objects in the database.

    // NOTE that we will need to expand the ASM states/events to incorporate the state
    // in which assertions have been generated.

    // NOTE that errors generated by RAIRE service (there are a series of types of errors) will need
    // to be handled appropriately).
    return "";
  }

}
